# <a name="glossary-keys" id="glossary-keys" data-magellan-target="glossary-keys">Keys</a>

Habitat has strong cryptography built into both Habitat Builder and the Supervisor. This means there are several different kinds of keys.

## Origin Key Pairs

Every package and artifact in Habitat belongs to an [origin](/docs/glossary/#glossary-artifacts) and is cryptographically signed with that origin's private key.
Habitat requires both the public and the private key for producing and consuming origin packages.
On the production side, Builder---both the service and the Depot---use the origin private key to sign and verify packages as they move from your development environment to Builder. On the consumption side, the Supervisors require the public key to verify the compiled artifacts.

Origin key cryptography is asymmetric: it has a public key that you can distribute freely, and a private key that you should keep safe.

Habitat uses the public origin key to verify the integrity of downloaded artifacts before installing them.
Habitat will only install artifacts for which it has the public origin key, and will not install them without it.
You can provide a public origin key to Habitat by pointing it to a Builder site that has the origin key, or by saving the origin key onto disk outside of Habitat.
Use `hab origin key upload` to upload origin keys to Builder.
Use `hab origin key download` to download your origin keys from Builder to your environment.
Use `hab origin key import` to read the key from a standard input stream:

```bash
hab origin key import <enter or paste key>
hab origin key import <PATH_TO_KEY>
curl <URL_THAT_RETURNS_KEY> | hab origin key import
```

See the [hab origin key](docs/habitat-cli/#hab-origin-key) command documentation for more information about working with origin keys from the command line.

## User and Service Group Keys

User and service group keys are used to set up trust relationships between these two entities. Service groups can be set up to reject communication (e.g. applying new configuration via `hab config apply`) from untrusted users.

By default, service groups will trust *any* communication, so for a production deployment of Habitat, setting up these relationships is essential.

User and service group keys also utilize asymmetric cryptography. To apply configuration changes to service groups when running in this mode, a user uses their own private key to encrypt configuration information for a service group, using that service group's public key. The service group then uses its private key to decrypt the configuration information, and the user's public key to verify.

## Ring Encryption Key

A Supervisor ring can be optionally set up to encrypt *all* communication across the network. This requires the use of a symmetric pre-shared key. Any Supervisor joining the ring that does not present this key will be rejected.
