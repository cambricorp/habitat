# <a name="glossary-artifacts" id="glossary-artifacts" data-magellan-target="glossary-artifacts">Artifacts</a>

A Habitat artifact refers to a binary distribution for a given package built with Habitat. A Habitat artifact is a signed tarball with a `.hart` file extension. Habitat artifacts are composed of a software library or application, the configuration information for that software, and lifecycle hooks. They are created from a the plan file, a `plan.sh` on Linux systems or a `plan.ps1` on Windows systems, and are built with Habitat tools. Habitat artifacts can be exported to a specific format, such as when creating a Docker container.

Habitat artifacts are identified using a four-part fully-qualified package identifier(FQPI) that takes the form: `origin/name/version/release`, where origin, name, version, and release are replaced with their corresponding values.

**Package Identifier components**

- `Origin`: A name that defines a set of related Habitat packages and the artifacts they generate. For example, "sample", "core", or "mycompany".
- `Name`: The name of the application or service. For example, "postgres".
- `Version`: The version number designation by the author(s) of the application or service. For example, "3.1.1", or "20160118".
- `Release`: The unique Habitat id for a given version based on the timestamp pattern _YYYYMMDDhhmmss_. For example, "20160204220358" would be a Habitat artifact built at 22:03:58 on February 4th, 2016.

When referring to Habitat artifacts from either Builder or the Studio, you can refer to them in two ways:

- With a Habitat package identifier 
- With a fully-qualified Habitat package identifier

Habitat package identifier
: typically specified using the two-component form `origin/name`. For example, `core/redis` or `core/openssl`. Use the three-component form `origin/name/version`, such as `core/redis/5.0.4`, when you need a specific version of an artifact.

Fully-qualified Habitat artifact identifier
:includes all four components in the following format: `origin/name/version/release`. For example, `core/glibc/2.22/20160310192356`.

If the Habitat artifact identifier isn't fully specified (having fewer than four components), then the missing components are assumed to be the most recent versions. For example:

- `core/glibc` assumes that version and release values are for the latest version of chef/glibc.

- `core/glibc/2.22` assumes that the version of chef/glibc is 2.22 and that the release is for the most recent value of chef/glibc/2.22.

- `core/glibc/2.22/20160310192356` only refers to the specific Habitat artifact 20160310192356.

## Habitat Artifact Export Formats

Habitat `.hart` files can be exported in a number of different formats depending on what you need where. This is powerful because you can use the same immutable Habitat artifact by exporting it into a format that you need for a specific job. For example, when you can use one format for iterating locally in a Docker container, another to promote that Habitat artifact to an environment running Kubernetes, and a third to promote it to a datacenter that's running virtual machines, but the Habitat artifact is identical in each location---it's simply exported to the correct format for the job you are trying to do. 

You can read more about how to export Habitat artifacts, and what exporters are currently available, [here](/docs/developing-packages/#pkg-exports).
